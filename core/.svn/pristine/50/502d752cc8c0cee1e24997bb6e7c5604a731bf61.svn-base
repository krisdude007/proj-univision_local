<?php

class MobileController extends Controller {

  /*
   * Movile API Controller
   * 
   * THIS CAN ONLY BE USED OVER SSL
   */
  public $layout = false;
  private $outputFormats = array('json', 'xml');
  private $outputFormat = 'json';
  private $token = null;
  private $user;
  const MAX_LIFETIME_SECS = 60;

  public function filters() {
    return array();
  }

  /*
   * Utility methods
   */

  private function getStatusCodeMessage($status) {
    // these could be stored in a .ini file and loaded
    // via parse_ini_file()... however, this will suffice
    // for an example
    $codes = Array(
        200 => 'OK',
        400 => 'Bad Request',
        401 => 'Unauthorized',
        402 => 'Payment Required',
        403 => 'Forbidden',
        404 => 'Not Found',
        500 => 'Internal Server Error',
        501 => 'Not Implemented',
    );
    return (isset($codes[$status])) ? $codes[$status] : '';
  }

  private function renderOutput($output = array(), $outputFormat = 'json') {

    switch ($outputFormat) {
      case 'json':
        echo $this->renderJson($output);
        break;
      case 'xml':
        echo $this->renderXml($output);
        break;
      default:
        $code = 501;
        $this->throwException($code, $this->getStatusCodeMessage($code));
        break;
    }
    Yii::app()->end();
  }

  private function renderXml($output) {

    header('Content-type: application/xml');
    $xml = new SimpleXMLElement('<root/>');
    $output = array_flip($output);
    array_walk_recursive($output, array($xml, 'addChild'));
    return $xml->asXML();
  }

  private function renderJson($output) {
    header('Content-type: application/json');
    return CJSON::encode($output);
  }

  private function throwException($errorCode, $errorMessage) {
    $this->renderOutput(array('errorCode' => $errorCode, 'errorMessage' => $errorMessage));
  }

  /*
   * Authentication
   *
   *  todo - incorporate API KEY
   *  todo - incorporate token expiration
   *  todo - validate the token (strlen, etc) prior to querying the db
   */

  // now we can login without an action being called
  private function login($user) {
    if (UserUtility::login($user, false, true)) {

      $this->user = $user->findByAttributes(array('username' => $user->username));
      AuditUtility::save($this, $_REQUEST, array(), $this->user->id);

      // remove any previous token record that might be associated with this user
      eUserToken::model()->deleteAllByAttributes(array('user_id' => $this->user->id));

      // generate & store token
      $this->token = eUserToken::generateToken();
      $userToken = new eUserToken();
      $userToken->user_id = $this->user->id;
      $userToken->token = $this->token;
      $userToken->created_on = new CDbExpression('NOW()');
      $userToken->updated_on = new CDbExpression('NOW()');
      $userToken->save();
      
      return true;
    }
    
    return false;
  }

  public function actionLogin() {

    if (isset($_POST['eUser'])) {
      $user = new eUser;
      $user->setScenario('login');
      $user->attributes = $_POST['eUser'];
      
      if ($this->login($user)) {
        
        // return successful login data
        $output = array('user_id' => $this->user->id,
                        'user_token' => $this->token);
        $this->renderOutput($output);
      }
      
      $code = 401;
      $error = $this->throwException($code, $this->getStatusCodeMessage($code));
    }

    $code = 400;
    $error = $this->throwException($code, $this->getStatusCodeMessage($code));
  }

  
  public function actionTest() {
    $this->token = $_POST['token'];
    $this->validateToken();
  }
  
  public function actionLogout() {
    if (!$this->validateToken()) {
      $this->throwException(401, $this->getStatusCodeMessage(401));
    }
    
    $this->logout();
  }

  // now we can logout without an action being called
  private function logout() {
    
    // remove token
    $tokenModel = $this->getUserTokenModel(false);
    
    if($tokenModel) {
      $tokenModel->delete();
    }
    
    // send response
    $code = 401;
    $error = $this->throwException($code, $this->getStatusCodeMessage($code));
  }
  
  private function getUserTokenModel($withUser = true) {
    
    if(!$withUser) {
      return eUserToken::model()->findByAttributes(array('token' => $this->token));
    }
    
    return eUserToken::model()->with('user')->findByAttributes(array('token' => $this->token));
  }

  /*
   * Call this first in an action when you want to make sure a user is logged in
   * or in the controller init based on whether or not the user is logged in
   * 
   * responsible for now for setting user class member
   */

  private function validateToken() {

    if (!is_null($this->token)) {
      $tokenModel = $this->getUserTokenModel();

      if (!is_null($tokenModel)) {
        // set user
        $this->user = $tokenModel->user;
        
        // todo - check token updated_at.. expire if beyond x amount of time
        $difference = time() - CDateTimeParser::parse($tokenModel->updated_on, "yyyy-MM-dd HH:mm:ss");

        if ($difference >= self::MAX_LIFETIME_SECS) {
          //$this->logout();
        }
        // token is valid. update token and token timestamp
        $tokenModel->token = eUserToken::generateToken();
        $tokenModel->updated_on = new CDbExpression('NOW()');
        $tokenModel->save();
        
        return true;
      }

      return false;
    }

    return false;
  }

  /*
   * Registration
   */

  public function actionRegister() {
    
  }

  /*
   * Video functionality
   */

  public function actionVideos($limit = 10) {
    $this->token = $_POST['token'];
    if (!$this->validateToken()) {
      $this->throwException(401, $this->getStatusCodeMessage(401));
      //return; // calling renderOutput() ends script execution Andy ;)
    }
    $criteria = new CDbCriteria();
    $criteria->limit = $limit;
    $videos = eVideo::model()->with('user', 'brightcoves', 'tagVideos')->accepted()->recent()->findAll($criteria);
    $response = array();
    foreach ($videos as $video) {
      $response[$video->id] = array(
          'createDate' => strtotime($video->created_on),
          'title' => $video->title,
          'description' => $video->description,
          'tag' => implode(',', CHtml::listData($video->tagVideos, 'video_id', 'title')),
          'brightcoveID' => $video->brightcoves[0]->brightcove_id,
          'playerID' => Yii::app()->params['brightcove']['playerID'],
          'playerKey' => Yii::app()->params['brightcove']['playerKey'],
          'fallbackURL' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->filename . VIDEO_POST_FILE_EXT),
          'thumbnail' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->thumbnail . VIDEO_IMAGE_FILE_EXT),
          'views' => $video->views,
          'stars' => $video->rating,
          'user' => array(
              'id' => $video->user->id,
              'avatar' => UserUtility::getAvatar($video->user),
              'username' => $video->user->username
          )
      );
    }
    $this->renderOutput($response);
  }

  public function actionVideosByUserId($user_id = null, $limit = 10) {
    $this->token = $_POST['token'];
    if (!$this->validateToken()) {
      $this->throwException(401, $this->getStatusCodeMessage(401));
      return;
    }
    if (is_null($user_id)) {
      $this->throwException(400, $this->getStatusCodeMessage(400));
      return;
    }
    $criteria = new CDbCriteria();
    $criteria->compare('user_id', $this->user->id);
    $criteria->limit = $limit;
    $videos = eVideo::model()->with('user', 'brightcoves', 'tagVideos')->accepted()->recent()->findAll($criteria);
    $response = array();
    foreach ($videos as $video) {
      $response[$video->id] = array(
          'createDate' => strtotime($video->created_on),
          'title' => $video->title,
          'description' => $video->description,
          'tag' => implode(',', CHtml::listData($video->tagVideos, 'video_id', 'title')),
          'brightcoveID' => $video->brightcoves[0]->brightcove_id,
          'playerID' => Yii::app()->params['brightcove']['playerID'],
          'playerKey' => Yii::app()->params['brightcove']['playerKey'],
          'fallbackURL' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->filename . VIDEO_POST_FILE_EXT),
          'thumbnail' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->thumbnail . VIDEO_IMAGE_FILE_EXT),
          'views' => $video->views,
          'stars' => $video->rating,
          'user' => array(
              'id' => $video->user->id,
              'avatar' => UserUtility::getAvatar($video->user),
              'username' => $video->user->username
          )
      );
    }
    $this->renderOutput($response);
  }

  public function actionVideoById($id = null) {
    $this->token = $_POST['token'];
    if (!$this->validateToken()) {
      $this->throwException(401, $this->getStatusCodeMessage(401));
      return;
    }
    if (is_null($id)) {
      $this->throwException(400, $this->getStatusCodeMessage(400));
      return;
    }
    $video = eVideo::model()->with('user', 'brightcoves', 'tagVideos')->accepted()->findByPk($id);
    if (is_null($video)) {
      $this->throwException(404, $this->getStatusCodeMessage(404));
      return;
    }
    $response = array(
        'id' => $video->id,
        'createDate' => strtotime($video->created_on),
        'title' => $video->title,
        'description' => $video->description,
        'tag' => implode(',', CHtml::listData($video->tagVideos, 'video_id', 'title')),
        'brightcoveID' => $video->brightcoves[0]->brightcove_id,
        'playerID' => Yii::app()->params['brightcove']['playerID'],
        'playerKey' => Yii::app()->params['brightcove']['playerKey'],
        'fallbackURL' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->filename . VIDEO_POST_FILE_EXT),
        'thumbnail' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->thumbnail . VIDEO_IMAGE_FILE_EXT),
        'views' => $video->views,
        'stars' => $video->rating,
        'user' => array(
            'id' => $video->user->id,
            'avatar' => UserUtility::getAvatar($video->user),
            'username' => $video->user->username
        )
    );
    $this->renderOutput($response);
  }

  public function actionVideoUpload() {
    $this->token = $_POST['token'];
    $form = new FormVideoUpload;
    $form->attributes = $_POST['FormVideoUpload'];
    $form->is_ad = isset($form->is_ad) ? $form->is_ad : 0;
    $form->video = CUploadedFile::getInstance($form, 'video');
    if (!$this->validateToken()) {
      $this->throwException(401, $this->getStatusCodeMessage(401));
      return;
    }
    if (!$form->validate()) {
      $this->throwException(400, $this->getStatusCodeMessage(400));
    }
    $filename = uniqid('MB');
    $fileExtension = $form->video->extensionName;
    $fileInput = Yii::app()->params['paths']['video'] . '/' . $filename . '.' . $fileExtension;
    $fileOutput = Yii::app()->params['paths']['video'] . '/' . $filename . VIDEO_POST_FILE_EXT;
    $fileThumb = Yii::app()->params['paths']['video'] . '/' . $filename . VIDEO_IMAGE_FILE_EXT;
    $fileGif = Yii::app()->params['paths']['video'] . '/' . $filename . '.gif';
    $form->video->saveAs($fileInput);

    $durationArray = VideoUtility::getVideoDuration($fileInput);
    $durations = explode('.', $durationArray[2]);
    $duration = round($durations[0]);
    $duration = "00:00:" . str_pad($duration, 2, '0', STR_PAD_LEFT) . ".00";
    $watermarkVideo = eAppSetting::model()->findByAttributes(Array('attribute' => 'water_mark_on_video'));
    if ($watermarkVideo->value == 1) {
      $watermark = $_SERVER['DOCUMENT_ROOT'] . VIDEO_WATERMARK;
    }
    // convert to mp4
    $videoEncoded = VideoUtility::ffmpegFlvToMp4($fileInput, $fileOutput, $duration, $watermark);
    if (!$videoEncoded) {
      $this->throwException(500, $this->getStatusCodeMessage(500));
    }
    //get fileInfo
    $fileInfo = VideoUtility::getID3Info($fileOutput);
    // generate thumb
    VideoUtility::ffmpegGenerateThumbFromVideo($fileOutput, $fileThumb);
    // generate gif
    VideoUtility::ffmpegMp4ToGif($fileOutput, $fileGif);

    $video = new eVideo();
    $video->user_id = $this->user->id;
    $video->question_id = $form->question_id;
    $video->filename = $filename;
    $video->thumbnail = $filename;
    $video->processed = 1;
    $video->watermarked = $watermarkVideo->value;
    $video->title = $form->title;
    $video->description = $form->description;
    $video->duration = $duration;
    $video->frame_rate = $fileInfo['video']['frame_rate'];
    $video->view_key = eVideo::generateViewKey();
    $video->source = 'mobile';
    $video->to_twitter = eUserTwitter::model()->countByAttributes(array('user_id' => $this->user->id)) == 0 ? 0 : $form->to_twitter;
    $video->to_facebook = eUserFacebook::model()->countByAttributes(array('user_id' => $this->user->id)) == 0 ? 0 : $form->to_facebook;
    /*
      if ($form->is_ad == '1') {
      $record['title'] = 'AD: ' . $form->title;
      $record['description'] = 'amplify ad';
      $record['source'] = 'ad';
      }

      if ($form->company_name != '' && $form->company_email != '') {
      $record['company_name'] = $form->company_name;
      $record['company_email'] = $form->company_email;
      } */
    $video->arbitrator_id = $this->user->id;
    $video->status = 'new';
    if (VIDEO_FILTERS_EXTENDED) {
      $video->extendedStatus['new'] = true;
      $video->extendedStatus['new_tv'] = true;
    }
    //check auto accept
    $autoApprove = eAppSetting::model()->findByAttributes(Array('attribute' => 'auto_approve_submitted_videos'));
    if ($autoApprove->value) {
      $video->status = 'accepted';
      if (VIDEO_FILTERS_EXTENDED) {
        $video->extendedStatus['accepted'] = true;
        $video->extendedStatus['new_tv'] = true;
      }
    }
    $video->save();

    // handle tags
    $tags = $form->tags;
    if ($tags != '') {
      // if more than one tag was passed, explode them into an array
      if (strstr($tags, ',')) {
        $tags = explode(',', $tags);
      } else {
        $tags = array($tags);
      }

      foreach ($tags as $tag) {
        $tagModel = Tag::model()->findByAttributes(array('title' => $tag));
        if (is_null($tagModel)) {
          $tagModel = new Tag();
          $tagModel->title = $tag;
          $tagModel->save();
        }
        $tagVideoModel = new TagVideo();
        $tagVideoModel->tag_id = $tagModel->id;
        $tagVideoModel->video_id = $video->id;
        $tagVideoModel->save();
      }
    }
    $response = array(
        'id' => $video->id,
        'createDate' => strtotime($video->created_on),
        'title' => $video->title,
        'description' => $video->description,
        'tags' => implode(',', $tags),
        'brightcoveID' => $video->brightcoves[0]->brightcove_id,
        'playerID' => Yii::app()->params['brightcove']['playerID'],
        'playerKey' => Yii::app()->params['brightcove']['playerKey'],
        'fallbackURL' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->filename . VIDEO_POST_FILE_EXT),
        'thumbnail' => $this->createAbsoluteUrl('/' . basename(Yii::app()->params['paths']['video']) . '/' . $video->thumbnail . VIDEO_IMAGE_FILE_EXT),
        'user' => array(
            'id' => $this->user->id,
            'avatar' => UserUtility::getAvatar($this->user),
            'username' => $this->user->username,
        )
    );
    $this->renderOutput($response);
  }

  /*
   * Photo functionality
   */

  public function actionPhotos($limit = 10) {
    
  }

  public function actionPhotosByUserId($user_id = null, $limit = 10) {
    
  }

  public function actionPhotoById($id = null) {
    
  }

  public function actionPhotoUpload() {
    
  }

}

