<?php

class MobileController extends Controller {

    public $layout = false;
    private $outputFormat = 'json'; // json, xml

    public function filters() {
        return array();
    }

    protected function renderOutput($output = array()) {
        header('Content-type: application/json');
        echo CJSON::encode($output);
        Yii::app()->end();
    }

    private function throwException($errorCode, $errorMessage) {
        $this->renderOutput(array('errorCode' => $errorCode, 'errorMessage' => $errorMessage));
    }

    // start stubbing out - for obvious reasons, 
    // these will need to tap into existing functionality 
    public function actionLogin() {

        $user = new eUser;
        $user->setScenario('login');

        if (isset($_POST['eUser'])) {
            
            $user->attributes = $_POST['eUser'];
            
            if (UserUtility::login($user, false, true)) {
                
                $userModel = $user->findByAttributes(array('username' => $user->username));
                AuditUtility::save($this, $_REQUEST, array(), $userModel->id);
                
                // remove any previous token record associated with this user
                eUserToken::model()->deleteAllByAttributes(array('user_id' => $userModel->id));
                
                // generate & store token 
                $token = eUserToken::generateToken();
                $userToken = new eUserToken();
                $userToken->user_id = $userModel->id;
                $userToken->token = $token;
                $userToken->created_on = new CDbExpression('NOW()');
                $userToken->updated_on = new CDbExpression('NOW()');
                $userToken->save();
                echo $token; exit;
                
            } else {
                $code = 401;
                $error = $this->throwException($code, $this->getStatusCodeMessage($code));
            }
        }

        $code = 400;
        $error = $this->throwException($code, $this->getStatusCodeMessage($code));
    }
  
    public function actionLogout() {
        
    }

    public function actionRegister() {
        
    }
    
    /*
     * Video functionality
     */
    public function actionVideos($limit = 10) {
        
    }
    
    public function actionVideosByUserId($user_id = null) {
        
    }
    
    public function actionVideoById($id = null) {
        
    }
    
    public function actionVideoUpload() {
        
    }
    
    /*
     * Photo functionality
     */
    public function actionPhotos($limit = 10) {
        
    }
    
    public function actionPhotosByUserId($user_id = null) {
        
    }
    
    public function actionPhotoById($id = null) {
        
    }
    
    public function actionPhotoUpload() {
        
    }

    
    /*
     * Utility methods
     */
    private function getStatusCodeMessage($status) {
        // these could be stored in a .ini file and loaded
        // via parse_ini_file()... however, this will suffice
        // for an example
        $codes = Array(
            200 => 'OK',
            400 => 'Bad Request',
            401 => 'Unauthorized',
            402 => 'Payment Required',
            403 => 'Forbidden',
            404 => 'Not Found',
            500 => 'Internal Server Error',
            501 => 'Not Implemented',
        );
        return (isset($codes[$status])) ? $codes[$status] : '';
    }

}